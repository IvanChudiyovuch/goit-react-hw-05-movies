{"version":3,"file":"static/js/415.b64a10ab.chunk.js","mappings":"sUAGMA,EAAU,gCACVC,EAAS,mCAEFC,EAAgB,mCAAG,iHAIlBC,IAAAA,IAAA,UAAaH,EAAb,qCAAiDC,IAJ/B,uBAGlBG,EAHkB,EAG1BC,KAAQD,QAGJE,EAAYF,EAAQG,KAAI,kBAA0B,CACtDC,GAD4B,EAAGA,GAE/BC,YAF4B,EAAOA,YAAP,IANF,kBAWrB,CAAEH,UAAAA,IAXmB,gCAa5BI,QAAQC,IAAR,MAb4B,yDAAH,qDAiBhBC,EAAU,mCAAG,WAAMJ,GAAN,gGAEAL,IAAAA,IAAA,UACjBH,EADiB,iBACDQ,EADC,oBACaP,EADb,oBAFA,cAEhBY,EAFgB,yBAMfA,EAAQR,MANO,gCAQtBK,QAAQC,IAAR,MARsB,yDAAH,sDAYVG,EAAc,mCAAG,WAAMC,GAAN,kGAIhBZ,IAAAA,IAAA,UACLH,EADK,gCAC0BC,EAD1B,iCACyDc,EADzD,gCAJgB,uBAGhBX,EAHgB,EAGxBC,KAAQD,QAHgB,kBAQnB,CAAEA,QAAAA,IARiB,gCAU1BM,QAAQC,IAAR,MAV0B,yDAAH,sDAcdK,EAAe,mCAAG,WAAMR,GAAN,gGAEJL,IAAAA,IAAA,UAClBH,EADkB,iBACFQ,EADE,4BACoBP,EADpB,oBAFI,cAErBgB,EAFqB,yBAKpBA,EAASZ,MALW,gCAO3BK,QAAQC,IAAR,MAP2B,yDAAH,sDAWfO,EAAe,mCAAG,WAAMV,GAAN,gGAEJL,IAAAA,IAAA,UAClBH,EADkB,iBACFQ,EADE,4BACoBP,EADpB,oBAFI,cAErBgB,EAFqB,yBAKpBA,EAASZ,MALW,gCAO3BK,QAAQC,IAAR,MAP2B,yDAAH,sDAW5BC,EAAWO,UAAY,CACrBX,GAAIY,EAAAA,UAAAA,OAAAA,YAGNN,EAAeK,UAAY,CACzBX,GAAIY,EAAAA,UAAAA,OAAAA,W,uGC1EOC,EAAOC,EAAAA,EAAAA,GAAH,uLAQR,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGGC,EAAWJ,EAAAA,EAAAA,GAAH,oTAER,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAWDE,EAAYL,EAAAA,EAAAA,IAAH,yD,SCtBTM,EAAkB,SAAC,GAAiB,IAAfxB,EAAc,EAAdA,QAE1ByB,GAAWC,EAAAA,EAAAA,MACjB,OACE,+BACE,SAACT,EAAD,UACGjB,EAAQG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAP,OACX,SAACiB,EAAD,WACE,SAAC,KAAD,CAAMK,GAAE,kBAAavB,GAAMwB,MAAO,CAAEC,KAAMJ,GAA1C,UACE,SAACF,EAAD,CAAWO,IARN,kCAQsBzB,EAAa0B,IAAI,QAFjC3B,EADJ,OAUpB,C,+GCCD,UAjBa,WACX,OAA8B4B,EAAAA,EAAAA,UAAS,IAAvC,eAAOhC,EAAP,KAAgBiC,EAAhB,KASA,OAPAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,uGAC6BpC,EAAAA,EAAAA,MAD7B,gBACSI,EADT,EACSA,UACR+B,EAAW/B,GAFZ,0CAAD,EAID,GAAE,KAGD,0BACE,SAAC,IAAD,CAAiBF,QAASA,KAG/B,C","sources":["components/Fetch/FetchApi.jsx","components/RenderMovieList/RenderMovieList.styled.jsx","components/RenderMovieList/RenderMovieList.jsx","pages/Home.jsx"],"sourcesContent":["import { PropTypes } from 'prop-types';\nimport axios from 'axios';\n\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst APIKey = '9922346ea7680187f6bd01b1263e365d';\n\nexport const GetTrendingMovie = async () => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(`${baseURL}/trending/all/day?api_key=${APIKey}`);\n\n    const movieData = results.map(({ id, poster_path }) => ({\n      id,\n      poster_path,\n    }));\n\n    return { movieData };\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const GetDetails = async id => {\n  try {\n    const respons = await axios.get(\n      `${baseURL}movie/${id}?api_key=${APIKey}&language=en-US`\n    );\n\n    return respons.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const GetSearchMovie = async query => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(\n      `${baseURL}search/movie?api_key=${APIKey}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n\n    return { results };\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getMovieCredits = async id => {\n  try {\n    const response = await axios.get(\n      `${baseURL}movie/${id}/credits?api_key=${APIKey}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieRewiews = async id => {\n  try {\n    const response = await axios.get(\n      `${baseURL}movie/${id}/reviews?api_key=${APIKey}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nGetDetails.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nGetSearchMovie.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: centr;\n  flex-wrap: wrap;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n  gap: ${p => p.theme.space[3]}px;\n`;\n\nexport const ListItem = styled.li`\n  flex-basis: calc((100% - 120px) / 4);\n  padding: ${p => p.theme.space[2]}px;\n  flex-wrap: wrap;\n  object-fit: cover;\n  &:hover,\n  &:focus {\n    box-shadow: 1px 4px 6px rgba(0, 0, 0, 0.16), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      0px 1px 1px rgba(0, 0, 0, 0.12);\n    transform: scale(1.03);\n  }\n`;\n\nexport const ListImage = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, ListItem, ListImage } from './RenderMovieList.styled';\n\nexport const RenderMovieList = ({ results }) => {\n  const imageUrl = 'https://image.tmdb.org/t/p/w500';\n  const location = useLocation();\n  return (\n    <>\n      <List>\n        {results.map(({ id, poster_path }) => (\n          <ListItem key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <ListImage src={imageUrl + poster_path} alt=\"\" />\n            </Link>\n          </ListItem>\n        ))}\n      </List>\n    </>\n  );\n};\n\nRenderMovieList.propTypes = {\n  results: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { GetTrendingMovie } from 'components/Fetch/FetchApi';\nimport { RenderMovieList } from 'components/RenderMovieList/RenderMovieList';\n\nconst Home = () => {\n  const [results, setResalts] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const { movieData } = await GetTrendingMovie();\n      setResalts(movieData);\n    })();\n  }, []);\n\n  return (\n    <div>\n      <RenderMovieList results={results} />\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["baseURL","APIKey","GetTrendingMovie","axios","results","data","movieData","map","id","poster_path","console","log","GetDetails","respons","GetSearchMovie","query","getMovieCredits","response","getMovieRewiews","propTypes","PropTypes","List","styled","p","theme","space","ListItem","ListImage","RenderMovieList","location","useLocation","to","state","from","src","alt","useState","setResalts","useEffect"],"sourceRoot":""}