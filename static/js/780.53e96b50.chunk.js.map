{"version":3,"file":"static/js/780.53e96b50.chunk.js","mappings":"yRAEaA,EAAYC,EAAAA,EAAAA,IAAH,+GAOTC,EAAOD,EAAAA,EAAAA,GAAH,uLAQR,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGGC,EAAWL,EAAAA,EAAAA,GAAH,+IAER,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAMDE,EAAYN,EAAAA,EAAAA,IAAH,wCAITO,EAAeP,EAAAA,EAAAA,IAAH,8F,SCtBZQ,EAAW,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACzB,OACE,SAACV,EAAD,WACE,SAACE,EAAD,UACGQ,EAAQC,KACP,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,cAAeC,EAA3C,EAA2CA,UAA3C,OACE,UAACT,EAAD,YACE,SAACC,EAAD,CACES,IACEH,EAAY,yCAC0BA,GAD1B,oDAIdI,IAAKH,KAEP,UAACN,EAAD,YACE,wBAAKM,KACL,wCACa,0BAAOF,YAZTG,EADjB,OAsBT,ECVD,EAtBa,WACX,IAAQG,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOV,EAAP,KAAgBW,EAAhB,KASA,OARAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,uGACuBC,EAAAA,EAAAA,IAAgBL,GADvC,OACOM,EADP,OAEOC,EAAOD,EAAQC,KACrBJ,EAAWI,GAHZ,0CAAD,EAKD,GAAE,CAACP,KAGF,yBACGR,EAAQgB,OAAS,GAChB,SAACjB,EAAD,CAAUC,QAASA,IAEnB,kCAIP,C,sNCtBKiB,EAAU,gCACVC,EAAS,mCAEFC,EAAgB,mCAAG,iHAIlBC,IAAAA,IAAA,UAAaH,EAAb,qCAAiDC,IAJ/B,uBAGlBG,EAHkB,EAG1BC,KAAQD,QAGJE,EAAYF,EAAQpB,KAAI,kBAA0B,CACtDO,GAD4B,EAAGA,GAE/BgB,YAF4B,EAAOA,YAAP,IANF,kBAWrB,CAAED,UAAAA,IAXmB,gCAa5BE,QAAQC,IAAR,MAb4B,yDAAH,qDAiBhBC,EAAU,mCAAG,WAAMnB,GAAN,gGAEAY,IAAAA,IAAA,UACjBH,EADiB,iBACDT,EADC,oBACaU,EADb,oBAFA,cAEhBJ,EAFgB,yBAMfA,EAAQQ,MANO,gCAQtBG,QAAQC,IAAR,MARsB,yDAAH,sDAYVE,EAAc,mCAAG,WAAMC,GAAN,kGAIhBT,IAAAA,IAAA,UACLH,EADK,gCAC0BC,EAD1B,iCACyDW,EADzD,gCAJgB,uBAGhBR,EAHgB,EAGxBC,KAAQD,QAHgB,kBAQnB,CAAEA,QAAAA,IARiB,gCAU1BI,QAAQC,IAAR,MAV0B,yDAAH,sDAcdb,EAAe,mCAAG,WAAML,GAAN,gGAEJY,IAAAA,IAAA,UAClBH,EADkB,iBACFT,EADE,4BACoBU,EADpB,oBAFI,cAErBY,EAFqB,yBAKpBA,EAASR,MALW,gCAO3BG,QAAQC,IAAR,MAP2B,yDAAH,sDAWfK,EAAe,mCAAG,WAAMvB,GAAN,gGAEJY,IAAAA,IAAA,UAClBH,EADkB,iBACFT,EADE,4BACoBU,EADpB,oBAFI,cAErBY,EAFqB,yBAKpBA,EAASR,MALW,gCAO3BG,QAAQC,IAAR,MAP2B,yDAAH,sDAW5BC,EAAWK,UAAY,CACrBxB,GAAIyB,EAAAA,UAAAA,OAAAA,YAGNL,EAAeI,UAAY,CACzBxB,GAAIyB,EAAAA,UAAAA,OAAAA,W","sources":["components/Cast/CastList.styled.jsx","components/Cast/CastList.jsx","components/Cast/Cast.jsx","components/Fetch/FetchApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  margin: 0 auto;\n  padding: 10px;\n  border-top: 1px solid black;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  align-items: centr;\n  flex-wrap: wrap;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n  gap: ${p => p.theme.space[3]}px;\n`;\n\nexport const ListItem = styled.li`\n  flex-basis: calc((100% - 150px) / 5);\n  padding: ${p => p.theme.space[2]}px;\n  flex-wrap: wrap;\n  object-fit: cover;\n  flex-grow: 1;\n`;\n\nexport const ListImage = styled.img`\n  width: 100%;\n`;\n\nexport const ActorContent = styled.div`\n  text-align: center;\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;\n","import { PropTypes } from 'prop-types';\n\nimport {\n  Container,\n  List,\n  ListItem,\n  ListImage,\n  ActorContent,\n} from './CastList.styled';\n\nexport const CastList = ({ credits }) => {\n  return (\n    <Container>\n      <List>\n        {credits.map(\n          ({ character, profile_path, original_name, credit_id }) => (\n            <ListItem key={credit_id}>\n              <ListImage\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : `https://via.placeholder.com/260x390?text=No+Photo`\n                }\n                alt={original_name}\n              />\n              <ActorContent>\n                <h4>{original_name}</h4>\n                <p>\n                  Character: <span>{character}</span>\n                </p>\n              </ActorContent>\n            </ListItem>\n          )\n        )}\n      </List>\n    </Container>\n  );\n};\n\nCastList.propTypes = {\n  credits: PropTypes.arrayOf(\n    PropTypes.shape({\n      credit_id: PropTypes.string,\n      poster_path: PropTypes.string,\n      original_name: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieCredits } from '../Fetch/FetchApi';\nimport { CastList } from './CastList';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [credits, setCredits] = useState([]);\n  useEffect(() => {\n    (async () => {\n      const respons = await getMovieCredits(id);\n      const cast = respons.cast;\n      setCredits(cast);\n    })();\n  }, [id]);\n\n  return (\n    <div>\n      {credits.length > 0 ? (\n        <CastList credits={credits} />\n      ) : (\n        'We have no cast for this movie'\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import { PropTypes } from 'prop-types';\nimport axios from 'axios';\n\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst APIKey = '9922346ea7680187f6bd01b1263e365d';\n\nexport const GetTrendingMovie = async () => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(`${baseURL}/trending/all/day?api_key=${APIKey}`);\n\n    const movieData = results.map(({ id, poster_path }) => ({\n      id,\n      poster_path,\n    }));\n\n    return { movieData };\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const GetDetails = async id => {\n  try {\n    const respons = await axios.get(\n      `${baseURL}movie/${id}?api_key=${APIKey}&language=en-US`\n    );\n\n    return respons.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const GetSearchMovie = async query => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(\n      `${baseURL}search/movie?api_key=${APIKey}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n\n    return { results };\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getMovieCredits = async id => {\n  try {\n    const response = await axios.get(\n      `${baseURL}movie/${id}/credits?api_key=${APIKey}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieRewiews = async id => {\n  try {\n    const response = await axios.get(\n      `${baseURL}movie/${id}/reviews?api_key=${APIKey}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nGetDetails.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nGetSearchMovie.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n"],"names":["Container","styled","List","p","theme","space","ListItem","ListImage","ActorContent","CastList","credits","map","character","profile_path","original_name","credit_id","src","alt","id","useParams","useState","setCredits","useEffect","getMovieCredits","respons","cast","length","baseURL","APIKey","GetTrendingMovie","axios","results","data","movieData","poster_path","console","log","GetDetails","GetSearchMovie","query","response","getMovieRewiews","propTypes","PropTypes"],"sourceRoot":""}