{"version":3,"file":"static/js/630.90561a52.chunk.js","mappings":"sUAGMA,EAAU,gCACVC,EAAS,mCAEFC,EAAgB,mCAAG,iHAIlBC,IAAAA,IAAA,UAAaH,EAAb,qCAAiDC,IAJ/B,uBAGlBG,EAHkB,EAG1BC,KAAQD,QAGJE,EAAYF,EAAQG,KAAI,kBAA0B,CACtDC,GAD4B,EAAGA,GAE/BC,YAF4B,EAAOA,YAAP,IANF,kBAWrB,CAAEH,UAAAA,IAXmB,gCAa5BI,QAAQC,IAAR,MAb4B,yDAAH,qDAiBhBC,EAAU,mCAAG,WAAMJ,GAAN,gGAEAL,IAAAA,IAAA,UACjBH,EADiB,iBACDQ,EADC,oBACaP,EADb,oBAFA,cAEhBY,EAFgB,yBAMfA,EAAQR,MANO,gCAQtBK,QAAQC,IAAR,MARsB,yDAAH,sDAYVG,EAAc,mCAAG,WAAMC,GAAN,kGAIhBZ,IAAAA,IAAA,UACLH,EADK,gCAC0BC,EAD1B,iCACyDc,EADzD,gCAJgB,uBAGhBX,EAHgB,EAGxBC,KAAQD,QAHgB,kBAQnB,CAAEA,QAAAA,IARiB,gCAU1BM,QAAQC,IAAR,MAV0B,yDAAH,sDAcdK,EAAe,mCAAG,WAAMR,GAAN,gGAEJL,IAAAA,IAAA,UAClBH,EADkB,iBACFQ,EADE,4BACoBP,EADpB,oBAFI,cAErBgB,EAFqB,yBAKpBA,EAASZ,MALW,gCAO3BK,QAAQC,IAAR,MAP2B,yDAAH,sDAWfO,EAAe,mCAAG,WAAMV,GAAN,gGAEJL,IAAAA,IAAA,UAClBH,EADkB,iBACFQ,EADE,4BACoBP,EADpB,oBAFI,cAErBgB,EAFqB,yBAKpBA,EAASZ,MALW,gCAO3BK,QAAQC,IAAR,MAP2B,yDAAH,sDAW5BC,EAAWO,UAAY,CACrBX,GAAIY,EAAAA,UAAAA,OAAAA,YAGNN,EAAeK,UAAY,CACzBX,GAAIY,EAAAA,UAAAA,OAAAA,W,qKC1EOC,EAAYC,EAAAA,EAAAA,IAAH,2EAKTC,EAAYD,EAAAA,EAAAA,IAAH,0CAGTE,EAAeF,EAAAA,EAAAA,EAAH,wD,SCNZG,EAAgB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC9B,OACE,SAACL,EAAD,UACGK,EAAQnB,KAAI,gBAAGoB,EAAH,EAAGA,QAASC,EAAZ,EAAYA,eAAgBpB,EAA5B,EAA4BA,GAA5B,OACX,UAACe,EAAD,YACE,qCAAaK,EAAeC,aAC5B,SAACL,EAAD,UAAeG,MAFDnB,EADL,KAQlB,ECWD,EArBgB,WACd,IAAQA,GAAOsB,EAAAA,EAAAA,MAAPtB,GACR,GAA8BuB,EAAAA,EAAAA,UAAS,IAAvC,eAAOL,EAAP,KAAgBM,EAAhB,KAQA,OAPAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,uGACuBf,EAAAA,EAAAA,IAAgBV,GADvC,OACOK,EADP,OAEOa,EAAUb,EAAQT,QACxB4B,EAAWN,GAHZ,0CAAD,EAKD,GAAE,CAAClB,KAEF,yBACGkB,EAAQQ,OAAS,GAChB,SAACT,EAAD,CAAeC,QAASA,IAExB,qCAIP,C","sources":["components/Fetch/FetchApi.jsx","components/Reviews/RenderReviews.styled.jsx","components/Reviews/RenderReviews.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import { PropTypes } from 'prop-types';\nimport axios from 'axios';\n\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst APIKey = '9922346ea7680187f6bd01b1263e365d';\n\nexport const GetTrendingMovie = async () => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(`${baseURL}/trending/all/day?api_key=${APIKey}`);\n\n    const movieData = results.map(({ id, poster_path }) => ({\n      id,\n      poster_path,\n    }));\n\n    return { movieData };\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const GetDetails = async id => {\n  try {\n    const respons = await axios.get(\n      `${baseURL}movie/${id}?api_key=${APIKey}&language=en-US`\n    );\n\n    return respons.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const GetSearchMovie = async query => {\n  try {\n    const {\n      data: { results },\n    } = await axios.get(\n      `${baseURL}search/movie?api_key=${APIKey}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n\n    return { results };\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getMovieCredits = async id => {\n  try {\n    const response = await axios.get(\n      `${baseURL}movie/${id}/credits?api_key=${APIKey}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieRewiews = async id => {\n  try {\n    const response = await axios.get(\n      `${baseURL}movie/${id}/reviews?api_key=${APIKey}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nGetDetails.propTypes = {\n  id: PropTypes.number.isRequired,\n};\n\nGetSearchMovie.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  border-top: 1px solid black;\n`;\n\nexport const TableInfo = styled.div`\n  padding: 10px;\n`;\nexport const ParagrafText = styled.p`\n  margin: 0;\n  padding: 10px;\n`;\n","import { PropTypes } from 'prop-types';\n\nimport { ParagrafText, Container, TableInfo } from './RenderReviews.styled';\n\nexport const RenderReviews = ({ reviews }) => {\n  return (\n    <Container>\n      {reviews.map(({ content, author_details, id }) => (\n        <TableInfo key={id}>\n          <h4>Author: {author_details.username}</h4>\n          <ParagrafText>{content}</ParagrafText>\n        </TableInfo>\n      ))}\n    </Container>\n  );\n};\n\nRenderReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      content: PropTypes.string,\n      author_details: PropTypes.shape({\n        username: PropTypes.string,\n      }),\n      id: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieRewiews } from '../Fetch/FetchApi';\nimport { RenderReviews } from './RenderReviews';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setRewiews] = useState([]);\n  useEffect(() => {\n    (async () => {\n      const respons = await getMovieRewiews(id);\n      const reviews = respons.results;\n      setRewiews(reviews);\n    })();\n  }, [id]);\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        <RenderReviews reviews={reviews} />\n      ) : (\n        'We have no reviews for this movie'\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["baseURL","APIKey","GetTrendingMovie","axios","results","data","movieData","map","id","poster_path","console","log","GetDetails","respons","GetSearchMovie","query","getMovieCredits","response","getMovieRewiews","propTypes","PropTypes","Container","styled","TableInfo","ParagrafText","RenderReviews","reviews","content","author_details","username","useParams","useState","setRewiews","useEffect","length"],"sourceRoot":""}